import React, { useState } from 'react';
import { Upload, AlertCircle, CheckCircle, Download, Info } from 'lucide-react';
import Papa from 'papaparse';

const ExoplanetDetector = () => {
  const [file, setFile] = useState(null);
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [dataPreview, setDataPreview] = useState(null);

  // Simulated model prediction function
  // Replace this with actual API call to your trained model
  const predictExoplanet = async (data) => {
    // This is a placeholder - you'll replace this with your actual model endpoint
    // Example API call structure:
    /*
    const response = await fetch('YOUR_MODEL_API_ENDPOINT', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ data: data })
    });
    return await response.json();
    */
    
    // Simulated prediction logic for demonstration
    return data.map((row, idx) => {
      const score = Math.random();
      return {
        id: idx + 1,
        classification: score > 0.7 ? 'Confirmed Exoplanet' : score > 0.4 ? 'Candidate' : 'False Positive',
        confidence: (score * 100).toFixed(2),
        features: row
      };
    });
  };

  const handleFileUpload = (event) => {
    const uploadedFile = event.target.files[0];
    if (uploadedFile) {
      if (!uploadedFile.name.endsWith('.csv')) {
        setError('Please upload a CSV file');
        return;
      }
      setFile(uploadedFile);
      setError(null);
      parseCSV(uploadedFile);
    }
  };

  const parseCSV = (file) => {
    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      skipEmptyLines: true,
      complete: (results) => {
        if (results.data.length > 0) {
          setDataPreview(results.data.slice(0, 5));
        }
      },
      error: (error) => {
        setError(`Error parsing CSV: ${error.message}`);
      }
    });
  };

  const handleAnalyze = async () => {
    if (!file) {
      setError('Please upload a file first');
      return;
    }

    setLoading(true);
    setError(null);

    Papa.parse(file, {
      header: true,
      dynamicTyping: true,
      skipEmptyLines: true,
      complete: async (parseResults) => {
        try {
          const predictions = await predictExoplanet(parseResults.data);
          setResults(predictions);
        } catch (err) {
          setError('Error analyzing data: ' + err.message);
        } finally {
          setLoading(false);
        }
      },
      error: (error) => {
        setError(`Error parsing CSV: ${error.message}`);
        setLoading(false);
      }
    });
  };

  const downloadResults = () => {
    if (!results) return;
    
    const csv = Papa.unparse(results.map(r => ({
      ID: r.id,
      Classification: r.classification,
      Confidence: r.confidence + '%'
    })));
    
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'exoplanet_predictions.csv';
    a.click();
  };

  const getClassificationColor = (classification) => {
    if (classification === 'Confirmed Exoplanet') return 'text-green-600 bg-green-50';
    if (classification === 'Candidate') return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  const getSummaryStats = () => {
    if (!results) return null;
    
    const confirmed = results.filter(r => r.classification === 'Confirmed Exoplanet').length;
    const candidates = results.filter(r => r.classification === 'Candidate').length;
    const falsePositives = results.filter(r => r.classification === 'False Positive').length;
    
    return { confirmed, candidates, falsePositives, total: results.length };
  };

  const stats = getSummaryStats();

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold text-white mb-2">ðŸŒŸ Exoplanet Detection System</h1>
          <p className="text-gray-300 text-lg">AI-Powered Analysis of NASA Exoplanet Data</p>
        </div>

        {/* Info Panel */}
        <div className="bg-blue-500 bg-opacity-20 border border-blue-400 rounded-lg p-4 mb-6 text-white">
          <div className="flex items-start gap-3">
            <Info className="w-5 h-5 mt-0.5 flex-shrink-0" />
            <div className="text-sm">
              <p className="font-semibold mb-1">How to Connect Your Model:</p>
              <ol className="list-decimal ml-4 space-y-1">
                <li>Deploy your trained model as a REST API (using Flask, FastAPI, or similar)</li>
                <li>Replace the <code className="bg-black bg-opacity-30 px-1 rounded">predictExoplanet</code> function with an actual API call</li>
                <li>Ensure your API accepts CSV data and returns predictions in JSON format</li>
              </ol>
            </div>
          </div>
        </div>

        {/* Upload Section */}
        <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-xl p-8 mb-6 border border-white border-opacity-20">
          <h2 className="text-2xl font-bold text-white mb-4">Upload Exoplanet Data</h2>
          
          <div className="border-2 border-dashed border-white border-opacity-30 rounded-lg p-8 text-center">
            <Upload className="w-12 h-12 text-white mx-auto mb-4" />
            <label className="cursor-pointer">
              <span className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold inline-block transition">
                Choose CSV File
              </span>
              <input
                type="file"
                accept=".csv"
                onChange={handleFileUpload}
                className="hidden"
              />
            </label>
            {file && (
              <p className="text-white mt-4">
                Selected: <span className="font-semibold">{file.name}</span>
              </p>
            )}
          </div>

          {dataPreview && (
            <div className="mt-6">
              <h3 className="text-white font-semibold mb-2">Data Preview (First 5 rows):</h3>
              <div className="bg-black bg-opacity-30 rounded-lg p-4 overflow-x-auto">
                <table className="w-full text-sm text-white">
                  <thead>
                    <tr className="border-b border-gray-600">
                      {Object.keys(dataPreview[0]).slice(0, 5).map((key) => (
                        <th key={key} className="px-4 py-2 text-left">{key}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {dataPreview.map((row, idx) => (
                      <tr key={idx} className="border-b border-gray-700">
                        {Object.values(row).slice(0, 5).map((val, i) => (
                          <td key={i} className="px-4 py-2">{String(val)}</td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          <button
            onClick={handleAnalyze}
            disabled={!file || loading}
            className="w-full mt-6 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:from-gray-600 disabled:to-gray-600 text-white px-6 py-4 rounded-lg font-bold text-lg transition"
          >
            {loading ? 'Analyzing...' : 'Analyze with AI Model'}
          </button>

          {error && (
            <div className="mt-4 bg-red-500 bg-opacity-20 border border-red-400 rounded-lg p-4 flex items-center gap-3 text-white">
              <AlertCircle className="w-5 h-5" />
              <span>{error}</span>
            </div>
          )}
        </div>

        {/* Results Section */}
        {stats && (
          <div className="space-y-6">
            {/* Summary Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-lg p-6 border border-white border-opacity-20">
                <p className="text-gray-300 text-sm">Total Analyzed</p>
                <p className="text-4xl font-bold text-white mt-2">{stats.total}</p>
              </div>
              <div className="bg-green-500 bg-opacity-20 backdrop-blur-lg rounded-lg p-6 border border-green-400">
                <p className="text-gray-200 text-sm">Confirmed</p>
                <p className="text-4xl font-bold text-green-300 mt-2">{stats.confirmed}</p>
              </div>
              <div className="bg-yellow-500 bg-opacity-20 backdrop-blur-lg rounded-lg p-6 border border-yellow-400">
                <p className="text-gray-200 text-sm">Candidates</p>
                <p className="text-4xl font-bold text-yellow-300 mt-2">{stats.candidates}</p>
              </div>
              <div className="bg-red-500 bg-opacity-20 backdrop-blur-lg rounded-lg p-6 border border-red-400">
                <p className="text-gray-200 text-sm">False Positives</p>
                <p className="text-4xl font-bold text-red-300 mt-2">{stats.falsePositives}</p>
              </div>
            </div>

            {/* Detailed Results */}
            <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-xl p-8 border border-white border-opacity-20">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-white">Detection Results</h2>
                <button
                  onClick={downloadResults}
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition"
                >
                  <Download className="w-4 h-4" />
                  Export Results
                </button>
              </div>

              <div className="space-y-3 max-h-96 overflow-y-auto">
                {results.slice(0, 50).map((result) => (
                  <div
                    key={result.id}
                    className="bg-black bg-opacity-30 rounded-lg p-4 flex items-center justify-between"
                  >
                    <div className="flex items-center gap-4">
                      <div className="text-white font-mono">#{result.id}</div>
                      <div>
                        <span className={`px-3 py-1 rounded-full text-sm font-semibold ${getClassificationColor(result.classification)}`}>
                          {result.classification}
                        </span>
                      </div>
                    </div>
                    <div className="text-white">
                      <span className="text-gray-400 text-sm">Confidence: </span>
                      <span className="font-bold">{result.confidence}%</span>
                    </div>
                  </div>
                ))}
              </div>
              
              {results.length > 50 && (
                <p className="text-gray-300 text-sm mt-4 text-center">
                  Showing first 50 of {results.length} results. Download full results using the Export button.
                </p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExoplanetDetector;